var fs = require('fs');
var async = require('async');
var global_funs = require('../../../lib/global_funs');

module.exports = {
    //atdo
    debug: true,
    setDirectory: function (directory) {
        this.directory = directory;
        return this;
    },

    bind: function (app, cb) {
        //Save this in local variable, as we loose "this"-context in readdir
        fs.readdir(me.directory, function (err, list) {
            list.forEach(function (file) {
                var fileName = me.directory + '/' + file;
                if (fileName.indexOf('Controller') == -1)
                    return;
                var controller = require(fileName);
                var aliases = controller['aliases'] || [];
                aliases.push(me.translateFileNameToControllerName(file));
                for (var key in controller) {
                    //The function in the controller
                    var f = controller[key];
                    //The parameters in the controller-function
                    var params = me.translateFunctionBodyToParameterArray(f.toString());

                    //atdo 是否有指定的需要提前执行的函数
                    var preFunName = '';
                    if (params.length > 0) {
                        if (/cbof_\w+/.test(params[0])) {
                            preFunName = params[0].replace('cbof_', '');
                            params.splice(0, 1);
                        }
                    }

                    aliases.forEach(function (alias) {
                        //The generated path (method and url), alias menas controller name
                        var path = me.translatePath(key, alias, params);
                        //Does this function translate to a valid path for routing?
                        if (path !== false) {
                            //Binds the route in the app to the method
                            module.exports.bindFunction(app, path, params, f, preFunName);
                        }
                    });
                }
                if (cb)
                    cb();
            });
        });
    },

    find_reqs: function (app) {
        var reqs = {};
        //Save this in local variable, as we loose "this"-context in readdir
        fs.readdir(me.directory, function (err, list) {
            list.forEach(function (file) {
                var fileName = me.directory + '/' + file;
                if (fileName.indexOf('Controller') == -1)
                    return;
                var controller = require(fileName);
                var aliases = controller['aliases'] || [];
                aliases.push(me.translateFileNameToControllerName(file));
                for (var key in controller) {
                    //The function in the controller
                    var f = controller[key];
                    //The parameters in the controller-function
                    var params = me.translateFunctionBodyToParameterArray(f.toString());
                    var req_obj = me.find_req_obj(f.toString());
                    if (!req_obj) {
                        continue;
                    }
                    aliases.forEach(function (alias) {
                        //The generated path (method and url), alias menas controller name
                        var path = me.translatePath(key, alias, params);
                        //Does this function translate to a valid path for routing?
                        req_obj['type'] = path.method;
                        reqs[path.path] = req_obj;
                        if (path !== false) {
                        }
                    });
                    //atdo  获取 controller 里面的每一个函数的字串，解析得到：描述、参数、返回等到对象 ReqObjs 里面。
                }
            });
            console.log(reqs);
            //atdo 使用 ReqObjs 数据
            //app.get('/api', function(req, res){
            //	res.render('api', {});
            //});
        });
    },

    //atdo
    bindFunction: function (app, path, params, f, preFunName) {
        app[path.method](path.path, function (req, res) {
            if (preFunName == '') {
                var paramsLen = params.length;
                var pars = [];
                for (var i = 0; i < paramsLen; i++) {
                    pars[i] = req.params[params[i]];
                }
                f.apply(null, [req, res].concat(pars));
            } else {
                async.auto({
                    getPreData: function (callback) {
                        global_funs[preFunName](req, function (err, result) {
                            if (!err && result) {
                                callback(null, result);
                            }
                            else {
                                callback('err');
                            }
                        });
                    },
                    fireRealAction: ['getPreData', function (callback, results) {
                        callback(null);
                        var preData = results.getPreData;
                        me.debug && atu.out(preData);

                        var paramsLen = params.length;
                        var pars = [];
                        for (var i = 0; i < paramsLen; i++) {
                            pars[i] = req.params[params[i]];
                        }
                        req.preData = preData;
                        f.apply(null, [req, res, preFunName].concat(pars));
                    }]
                });
            }
        });
    },

    translateFunctionBodyToParameterArray: function (f) {
        var r2 = /^(function[ ]?[(][ ]?[a-zA-Z0-9]*[ ]?,[ ]?[a-zA-Z0-9]*[ ]?)(,?[ ]?([a-zA-Z0-9_]*))*/gi;
        var ss = r2.exec(f);
        ss = ss[0].replace(ss[1], '');
        ss = ss.substr(1).replace(/\s+/gm, '');
        if (ss.length) {
            return ss.split(',');
        } else {
            return [];
        }
    },

    find_req_obj: function (f) {
        var r3 = /req_obj\s*=\s*([\s\S]*};)/gim;
        r3 = f.match(r3);
        if (r3) {
            try{
                return eval(r3[0]);
            }catch (e){
            }
        }
    },

    translateFileNameToControllerName: function (fileName) {
        return fileName
            .slice(0,
            //Get everything before the last dot
            fileName.lastIndexOf('.'))
            .replace('Controller', '');
    },

    translatePath: function (methodName, controllerName, parameters) {
        //Ensure that both strings are lower-case
        controllerName = controllerName.toLowerCase();
        parameters = parameters || [];

        var parts = methodName.split('_');

        //Extract the method from parts
        var method = parts[0].toLowerCase();

        // Return false if this request method is not valid
        // or if the action name is missing
        if (['get', 'post', 'put', 'delete'].indexOf(method) == -1) return false;
        if (parts.length < 1) return false;

        //Remove method from parts
        parts.splice(0, 1);

        var path = '/';

        //Append controller-name to path, if different from 'home'
        if (controllerName != 'home')
            path += controllerName;

        //Append the rest of the parts
        parts.forEach(function (part) {
            if (part != 'index') {
                var separator = !!~parameters.indexOf(part) ? '/:' : '/';
                if (separator == '/') {
                    //Replaces the camelCased section with a hyphenated lowercase string
                    part = part.replace(/([A-Z])/g, '-$1').toLowerCase();
                }
                path += separator + part;
            }
        });

        parameters.forEach(function (parameter) {
            if (!~parts.indexOf(parameter))
                path += "/:" + parameter;
        });

        return {
            path: path,
            method: method
        }
    }
};
var me = module.exports;